<div class="page-wrapper">
    <div class="container">
        <form action="/api/news-articles" method="POST" enctype="multipart/form-data">
    <form class="library-form" action="<% if(library_data && library_data.type === 'Article'){ %>/update-library-article<% } else { %>/library-article-post<% } %>" method="post">
        <div class="wp-editor-container">
            <!-- Title Section -->
            <div class="title-section">
                <input type="text" name="title" placeholder="Add title" class="title-input" 
                    <% if(library_data && library_data.data && library_data.type === "Article") { %> 
                        value="<%= library_data.data.title %>" 
                    <% } %> required>
            </div>
    
            <!-- Main Image Upload -->
            <div class="form-input-element">
                <section class="form-element-type">Article Main Image</section>
                <section class="form-input-field">
                    <label class="file-upload-field" for="main-image-upload">
                        <% if(library_data && library_data.data && library_data.type === "Article") { %>
                            <%= library_data.data.mainImage %>
                        <% } else { %>
                            Img upload
                        <% } %>
                    </label>
                    <input type="file" class="image-upload" name="mainImage" id="main-image-upload" multiple accept="image/*" 
                        <% if(!library_data) { %> required <% } %>>
                </section>
            </div>
    
            <!-- Read Time -->
            <div class="form-input-element">
                <section class="form-element-type">Expected Read Time</section>
                <section class="form-input-field">
                    <input name="time" type="text" placeholder="x min/hr..." required
                        <% if(library_data && library_data.data && library_data.type === "Article") { %>
                            value="<%= library_data.data.time %>"
                        <% } %>>
                </section>
            </div>
    
            <!-- Toolbar -->
            <div class="editor-toolbar">
                <div class="toolbar-group">
                    <select class="format-select">
                        <option value="p">Paragraph</option>
                        <option value="h1">Heading 1</option>
                        <option value="h2">Heading 2</option>
                        <option value="h3">Heading 3</option>
                        <option value="h4">Heading 4</option>
                        <option value="h5">Heading 5</option>
                        <option value="h6">Heading 6</option>
                    </select>
                    
                    <div class="toolbar-separator"></div>
                    
                    <button type="button" class="toolbar-button" title="Bold">
                        <i class="fa-solid fa-bold"></i>
                    </button>
                    <button type="button" class="toolbar-button" title="Italic">
                        <i class="fa-solid fa-italic"></i>
                    </button>
                    <button type="button" class="toolbar-button" title="Link">
                        <i class="fa-solid fa-link"></i>
                    </button>
                    <button type="button" class="toolbar-button" title="Quote">
                        <i class="fa-solid fa-quote-left"></i>
                    </button>
                    <button type="button" class="toolbar-button" title="Bullet List">
                        <i class="fa-solid fa-list-ul"></i>
                    </button>
                    <button type="button" class="toolbar-button" title="Numbered List">
                        <i class="fa-solid fa-list-ol"></i>
                    </button>
                </div>
                
                <div class="toolbar-group">
                    <button type="button" class="add-media-button">
                        <i class="fa-solid fa-image"></i> Add Media
                    </button>
                </div>
            </div>
    
            <!-- Content Area -->
            <div class="form-append-container"></div>
    
            <!-- Right Sidebar -->
            <div class="editor-sidebar">
                <div class="publish-section">
                    <div class="publish-header">
                        <h3>Document</h3>
                        <button type="submit" class="submit-article-form submit-btn">
                            <span class="submit-progress"></span>
                            <i class="fa-solid fa-paper-plane z-idx10"></i>
                            <span class="z-idx10">Publish</span>
                        </button>
                    </div>
    
                    <div class="status-section">
                        <div class="status-item">
                            <span>Status</span>
                            <select name="status">
                                <option value="draft">Draft</option>
                                <option value="publish">Published</option>
                            </select>
                        </div>
                        <div class="status-item">
                            <span>Visibility</span>
                            <select name="visibility">
                                <option value="public">Public</option>
                                <option value="private">Private</option>
                            </select>
                        </div>
                    </div>
                </div>
    
                <div class="categories-section">
                    <h3>Categories</h3>
                    <div class="category-list">
                        <!-- Add your categories here -->
                    </div>
                    <button type="button" class="add-category-button">+ Add New Category</button>
                </div>
            </div>
        </div>
    </form>
    
    <style>
    /* Layout & Container Styles */
    .wp-editor-container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 0 20px;
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 20px;
    }
    
    .title-section {
        grid-column: 1 / -1;
    }
    
    .editor-sidebar {
        position: sticky;
        top: 20px;
    }
    
    /* Form Element Styles */
    .form-input-element {
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 15px;
        margin-bottom: 15px;
    }
    
    .form-element-type {
        font-weight: 500;
        margin-bottom: 10px;
        color: #1e1e1e;
        position: relative;
    }
    
    .input-field {
        width: 100%;
        min-height: 100px;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        resize: vertical;
    }
    
    .input-field:focus {
        outline: none;
        border-color: #007cba;
        box-shadow: 0 0 0 1px #007cba;
    }
    
    .form-append-container {
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 4px;
        min-height: 500px;
        padding: 20px;
    }
    
    /* Title Input Styles */
    .title-input {
        width: 100%;
        font-size: 2.5em;
        padding: 10px;
        border: none;
        background: transparent;
    }
    
    .title-input:focus {
        outline: none;
        border-color: #007cba;
    }
    
    /* File Upload Styles */
    .file-upload-field {
        display: block;
        padding: 10px;
        background: #f0f0f0;
        border: 1px dashed #ccc;
        border-radius: 4px;
        cursor: pointer;
        text-align: center;
    }
    
    .image-upload,
    .video-upload,
    .audio-upload {
        display: none;
    }
    
    /* Toolbar Styles */
    .editor-toolbar {
        background: #fff;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .toolbar-group {
        display: flex;
        gap: 5px;
        align-items: center;
    }
    
    .toolbar-separator {
        width: 1px;
        height: 24px;
        background: #ddd;
        margin: 0 10px;
    }
    
    .toolbar-button {
        padding: 8px;
        border: none;
        background: transparent;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .toolbar-button:hover {
        background: #f0f0f0;
    }
    
    .format-select {
        padding: 6px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    /* Dropdown Styles */
    .drop-down {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        margin-top: 4px;
        background: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        z-index: 1000;
    }
    
    .active-drop-down {
        display: block;
    }
    
    .drop-down input[type="radio"] {
        display: none;
    }
    
    .drop-down label {
        display: block;
        padding: 8px 12px;
        cursor: pointer;
        border-radius: 4px;
        transition: all 0.2s ease;
    }
    
    .drop-down label:hover {
        background-color: #f0f0f0;
    }
    
    .selected-type {
        padding: 8px 12px;
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 5px;
    }
    
    .selected-type:hover {
        background: #f8f8f8;
    }
    
    .selected-type .dropdown-value {
        font-weight: 500;
    }
    
    /* Button Styles */
    .submit-btn,
    .add-media-button,
    .add-category-button {
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 5px;
    }
    
    .submit-btn {
        background: #007cba;
        color: #fff;
        padding: 8px 16px;
        position: relative;
        overflow: hidden;
    }
    
    .submit-btn:hover {
        background: #006ba1;
    }
    
    .add-media-button,
    .add-category-button {
        background: #f0f0f0;
        padding: 8px 12px;
    }
    
    .add-category-button {
        width: 100%;
        margin-top: 10px;
    }
    
    .add-media-button:hover,
    .add-category-button:hover {
        background: #e5e5e5;
    }
    
    /* Element Removal Styling */
    .remove-element {
        display: block;
        padding: 8px 12px;
        margin-top: 8px;
        border-top: 1px solid #ddd;
        color: #dc3545;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }
    
    .remove-element:hover {
        background-color: #fff5f5;
    }
    
    /* Category Styles */
    .category-input-wrapper {
        display: flex;
        gap: 8px;
        margin-bottom: 10px;
    }
    
    .category-input {
        flex: 1;
        padding: 4px 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .add-category-confirm,
    .add-category-cancel {
        padding: 4px 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background: #f0f0f0;
        cursor: pointer;
    }
    
    .add-category-confirm:hover,
    .add-category-cancel:hover {
        background: #e0e0e0;
    }
    
    .category-item {
        padding: 4px 0;
    }
    
    .category-item label {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
    }
    
    /* Section Styles */
    .publish-section,
    .categories-section {
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 15px;
        margin-bottom: 20px;
    }
    
    .publish-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;

    
    .status-section {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
}
    
    .status-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .status-item select {
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    /* Range Slider Styles */
    .range-wrapper {
        padding: 15px;
    }
    
    .space-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }
    
    .space-indicator {
        width: 100%;
        background: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #666;
        transition: height 0.3s ease;
    }
    
    .range {
        width: 100%;
        margin-bottom: 5px;
    }
    
    .range-value {
        text-align: center;
        display: block;
        color: #666;
    }
    
    /* Utility Classes */
    .z-idx10 {
        z-index: 10;
        position: relative;
    }
    
    .submit-progress {
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        background: rgba(255, 255, 255, 0.2);
        width: 0;
        transition: width 0.3s ease;
    }
    </style>
    
    <script>
    // Initialize variables
    let file_inputs = [...document.querySelectorAll('input[type="file"]')];
    let all_drop_downs = [...document.querySelectorAll('.selected-type')];
    let input_element_container = document.querySelector('.form-append-container');
    const add_element_btn = document.querySelector('.add-media-button');
    const form_submit = document.querySelector('.library-form');
    let drop_down_list = [...document.querySelectorAll('.drop-down')];
    let countOfNewElements = 0;
    
    // File upload handling
    const updateFileNameUploaded = (file) => {
        let fileLabel = file.parentElement.querySelector('.file-upload-field');
        fileLabel.innerText = 'File Name: ' + file.files[0].name;
    };
    
    file_inputs.forEach(file => {
        file.addEventListener('change', () => {
            updateFileNameUploaded(file);
        });
    });
    
    // Element creation and management
    // Update the addNewElement function to include the complete radio button section//
    const addNewElement = (itemCountId, selected='') => {
        let newElement = document.createElement("div");
        newElement.innerHTML = `<div class="form-input-element">
            <section class="form-element-type" tabindex="${itemCountId}" onBlur="hideDropDown(this)">
                <div class="selected-type" onClick="handleDropDownClick(this)">
                    <span class="dropdown-value">Paragraph</span>
                    <i class="fa-solid fa-caret-down"></i>
                </div>
                <div class="drop-down">
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}1" value="h1">
                    <label for="option${itemCountId}1">h1</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}2" value="h2">
                    <label for="option${itemCountId}2">h2</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}3" value="h3">
                    <label for="option${itemCountId}3">h3</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}4" value="h4">
                    <label for="option${itemCountId}4">h4</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}5" value="h5">
                    <label for="option${itemCountId}5">h5</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}6" value="h6">
                    <label for="option${itemCountId}6">h6</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}7" checked value="Paragraph">
                    <label for="option${itemCountId}7">Paragraph</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}8" value="space">
                    <label for="option${itemCountId}8">Empty Space</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}9" value="image">
                    <label for="option${itemCountId}9">Image</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}10" value="Video">
                    <label for="option${itemCountId}10">Video</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}11" value="Embed-Video">
                    <label for="option${itemCountId}11">Embed Video</label>
                    
                    <input type="radio" onClick="updateDropDownValue(this)" data-id="${itemCountId}" name="item${itemCountId}" id="option${itemCountId}12" value="Audio">
                    <label for="option${itemCountId}12">Audio</label>
                    
                    <label class="remove-element" onClick="removeElement(this)">Remove Item</label>
                </div>
            </section>
            <section class="form-input-field">
                <textarea class="input-field" name="item${itemCountId}" type="text" placeholder="Enter Text Here..." required></textarea>
            </section>
        </div>`;
        return newElement;
    };
    
    // Dropdown handling
    const handleDropDownClick = (e) => {
        e.parentElement.querySelector('.drop-down').classList.toggle('active-drop-down');
    };
    
    function hideDropDown(e) {
        e.querySelector('.drop-down').classList.remove('active-drop-down');
    }
    
    const removeElement = (e) => {
        e.parentElement.parentElement.parentElement.remove();
    };
    
    // Create input fields based on type
    const createInputForDropDown = (type, id, value='') => {
        switch(type) {
            case 'Paragraph':
                return `<textarea class="input-field" name="item${id}" type="text" placeholder="Enter Text Here..." required>${value || ''}</textarea>`;
            case 'image':
                return `<div>
                    <label class="file-upload-field" for="item${id}">${value || "Img upload"}</label>
                    <input class="image-upload" data-src="${value}" onChange="updateFileNameUploaded(this)" 
                        type="file" name="item${id}" id="item${id}" multiple accept="image/*" ${value === '' ? "required" : ''}>
                </div>`;
            case 'Video':
                return `<div>
                    <label class="file-upload-field" for="item${id}">${value || "Video upload"}</label>
                    <input class="video-upload" data-src="${value}" onChange="updateFileNameUploaded(this)" 
                        type="file" name="item${id}" id="item${id}" multiple accept="video/*" ${value === '' ? "required" : ''}>
                </div>`;
            case 'Embed-Video':
                return `<input name="item${id}" type="url" value="${value || ''}" placeholder="Enter Video URL..." required>`;
            case 'Audio':
                return `<div>
                    <label class="file-upload-field" for="item${id}">${value || "Audio upload"}</label>
                    <input class="audio-upload" data-src="${value}" onChange="updateFileNameUploaded(this)" 
                        type="file" name="item${id}" id="item${id}" multiple accept="audio/*" ${value === '' ? "required" : ''}>
                </div>`;
            case 'space':
                return `<div class="range-wrapper">
                    <div class="space-wrapper">
                        <p>Text on top</p>
                        <span class="space-indicator" style="height:${value || 1.6}rem">Empty Space</span>
                        <p>Text on the bottom</p>
                    </div>
                    <input class="range" onInput="updateRangeValue(this)" type="range" name="item${id}" 
                        id="item${id}" min="0" max="10" step="0.2" value=${value || '1.6'} required>
                    <label class="range-value" for="item${id}">${value || '1.6'}</label>
                </div>`;
            default:
                return `<input name="item${id}" type="text" value="${value || ''}" placeholder="Enter Text..." required>`;
        }
    };
    
    // Update dropdown value
    const updateDropDownValue = (e, value='') => {
        let parent = e.parentElement.parentElement;
        parent.querySelector('.dropdown-value').innerText = e.value;
        let id = e.getAttribute('data-id');
        let input = createInputForDropDown(e.value, id, value);
        parent.parentElement.querySelector('.form-input-field').innerHTML = input;
        // hide dropdown
        e.parentElement.parentElement.querySelector('.drop-down').classList.remove('active-drop-down');
    };
    
    const createInputs = (element, type, value, id) => {
        element.querySelector('.form-input-field').innerHTML = createInputForDropDown(type, id);
    };
    
    // Range onChange event
    function updateRangeValue(element) {
        element.parentElement.querySelector('.range-value').innerText = element.value;
        element.parentElement.querySelector('.space-indicator').style.height = `${element.value}rem`;
    }
    
    // Media upload handlers
    async function uploadImages(imageUpload) {
        try {
            const response = await fetch('/upload-images', {
                method: 'PUT',
                body: imageUpload
            });
            return response.ok;
        } catch(error) {
            console.error('Image upload failed:', error);
            return false;
        }
    }
    
    async function uploadAudio(audioUpload) {
        try {
            const response = await fetch('/upload-audio', {
                method: 'PUT',
                body: audioUpload
            });
            return response.ok;
        } catch(error) {
            console.error('Audio upload failed:', error);
            return false;
        }
    }
    
    async function uploadVideo(videoUpload) {
        try {
            const response = await fetch('/upload-video', {
                method: 'PUT',
                body: videoUpload
            });
            return response.ok;
        } catch(error) {
            console.error('Video upload failed:', error);
            return false;
        }
    }
    
    async function handleFormMediaUploads(form, submit_btn_progress) {
        const imageInputs = [...form.querySelectorAll('.image-upload')];
        const audioInputs = [...form.querySelectorAll('.audio-upload')];
        const videoInputs = [...form.querySelectorAll('.video-upload')];
    
        const imageUpload = new FormData();
        imageInputs.forEach(file => file.files[0] && imageUpload.append('image', file.files[0]));
    
        const audioUpload = new FormData();
        audioInputs.forEach(file => file.files[0] && audioUpload.append('audio', file.files[0]));
    
        const videoUpload = new FormData();
        videoInputs.forEach(file => file.files[0] && videoUpload.append('video', file.files[0]));
    
        try {
            // Upload images
            if(imageInputs.length) {
                await uploadImages(imageUpload);
            }
            submit_btn_progress.style.width = '35%';
    
            // Upload audio
            if(audioInputs.length) {
                await uploadAudio(audioUpload);
            }
            submit_btn_progress.style.width = '65%';
    
            // Upload video
            if(videoInputs.length) {
                await uploadVideo(videoUpload);
            }
            submit_btn_progress.style.width = '100%';
    
            return true;
        } catch(error) {
            console.error('Media upload failed:', error);
            return false;
        }
    }
    
    function formatArticleDataForSubmission(form) {
        let formData = {
            content: [],
            categories: []
        };
        
        try {
            formData.title = form.querySelector('[name="title"]').value;
            formData.time = form.querySelector('[name="time"]').value;
            const mainImageInput = form.querySelector('#main-image-upload');
            formData.mainImage = mainImageInput.files[0] ? mainImageInput.files[0].name : '';
            formData.status = form.querySelector('[name="status"]').value;
            formData.visibility = form.querySelector('[name="visibility"]').value;
            
            // Add categories
            form.querySelectorAll('input[name="categories[]"]:checked').forEach(checkbox => {
                formData.categories.push(checkbox.value);
            });
        } catch(e) {
            console.error('Error gathering form data:', e);
        }
    
        async function handleFormMediaUploads(form, submit_btn_progress) {
        const imageInputs = [...form.querySelectorAll('.image-upload')];
        const audioInputs = [...form.querySelectorAll('.audio-upload')];
        const videoInputs = [...form.querySelectorAll('.video-upload')];
    
        try {
            // Get all element data and types
            form.querySelectorAll('.form-append-container .form-input-element').forEach((element, itemNum) => {
             // Your logic for processing each element
    });

          return formData; // Ensure this is inside the try block
        } catch (error) {
             console.error('Error:', error); // Properly aligned catch block
        }

        
        // Form submission handler
        form_submit.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submit_btn_progress = form_submit.querySelector('.submit-progress');
        
        try {
        const uploadsSuccess = await handleFormMediaUploads(form_submit, submit_btn_progress);
        
        if (!uploadsSuccess) {
        alert('Error uploading media files');
        return;
        }
        
        const response = await fetch(form_submit.action, {
        method: 'POST',
        headers: {
        'Content-Type': 'application/json',
        },
        body: JSON.stringify(formatArticleDataForSubmission(form_submit)),
        });
        
        if (response.ok) {
        window.location.href = "/library";
        } else {
        alert('Error submitting form');
        }
        } catch(error) {
        console.error('Form submission failed:', error);
        alert('Error submitting form');
        }
        });
        
        form-input-field ('input;').value;
            }
    
            formData.content.push({
                order: itemNum + 1,
                type: type,
                data: data
            });
        }
    
        return formData;
    
    // Form submission handler
form_submit.addEventListener('submit', async (e) => {
    e.preventDefault(); // Prevent default form submission behavior

    const submit_btn_progress = form_submit.querySelector('.submit-progress'); // Get progress bar element

    try {
        // Handle media uploads
        const uploadsSuccess = await handleFormMediaUploads(form_submit, submit_btn_progress);

        if (!uploadsSuccess) {
            alert('Error uploading media files');
            return; // Exit if media uploads fail
        }

        // Submit the form data
        const response = await fetch(form_submit.action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formatArticleDataForSubmission(form_submit)),
        });

        if (response.ok) {
            window.location.href = "/library"; // Redirect to library on success
        } else {
            alert('Error submitting form'); // Show an error message for failed submission
        }
    } catch (error) {
        console.error('Form submission failed:', error);
        alert('Error submitting form'); // Notify the user of the failure
    }
});

// Function to format form data for submission
function formatArticleDataForSubmission(form) {
    let formData = {
        content: [],
        categories: []
    };

    try {
        formData.title = form.querySelector('[name="title"]').value;
        formData.time = form.querySelector('[name="time"]').value;

        const mainImageInput = form.querySelector('#main-image-upload');
        formData.mainImage = mainImageInput.files[0] ? mainImageInput.files[0].name : '';

        formData.status = form.querySelector('[name="status"]').value;
        formData.visibility = form.querySelector('[name="visibility"]').value;

        // Process content elements
        form.querySelectorAll('.form-append-container .form-input-element').forEach((element, itemNum) => {
            const type = element.querySelector('.dropdown-value').innerText;
            const data = element.querySelector('.input-field')?.value || '';

            formData.content.push({
                order: itemNum + 1,
                type: type,
                data: data
            });
        });

        // Add selected categories
        form.querySelectorAll('input[name="categories[]"]:checked').forEach((checkbox) => {
            formData.categories.push(checkbox.value);
        });

        return formData;
    } catch (error) {
        console.error('Error gathering form data:', error);
        return formData; // Return the partial data collected in case of error
    }
}
    
    // Initialize toolbar format handlers
    document.querySelectorAll('.toolbar-button').forEach(button => {
        button.addEventListener('click', function() {
            const command = this.getAttribute('title').toLowerCase();
            const activeEditor = document.activeElement;
            if(activeEditor.classList.contains('input-field')) {
                document.execCommand(command, false, null);
                activeEditor.focus();
            }
        });
    });
    
    // Format dropdown handler
    document.querySelector('.format-select').addEventListener('change', function() {
        const tag = this.value;
        const activeEditor = document.activeElement;
        if(activeEditor.classList.contains('input-field')) {
            document.execCommand('formatBlock', false, `<${tag}>`);
            activeEditor.focus();
        }
    });
    
    if(activeEditor.classList.contains('input-field')) {
    document.execCommand('formatBlock', false, `<${tag}>`);
    activeEditor.focus();
}

// Initialize existing content if editing
<% if (library_data && library_data.type === "Article") { %>  
<script>
    try {
        const form_content_data = <%- JSON.stringify(library_data.data.content) %>;
        if (form_content_data) {
            form_content_data.forEach((item, index) => {
                let newElement = addNewElement(countOfNewElements, item.type);
                let appendedElement = input_element_container.appendChild(newElement);

                appendedElement.querySelectorAll(".drop-down input[type='radio']").forEach((radio) => {
                    if (radio.value === item.type) {
                        radio.checked = true;
                        updateDropDownValue(radio, item.data);
                    } else {
                        radio.checked = false;
                    }
                });

                countOfNewElements++;
            });
        }
    } catch (error) {
        console.error('Error initializing content:', error);
    }
</script>
<% } %>

<script>
    // Add Media button handler
    document.querySelector('.add-media-button').addEventListener('click', () => {
        const element = addNewElement(countOfNewElements);
        input_element_container.appendChild(element);
        
        // Auto-select image type for media button
        const radioInput = element.querySelector('input[value="image"]');
        if (radioInput) {
            radioInput.checked = true;
            updateDropDownValue(radioInput);
        }
        
        countOfNewElements++;
    });
</script>
    
    // Category handling
    const categoryList = document.querySelector('.category-list');
    const addCategoryButton = document.querySelector('.add-category-button');
    
    addCategoryButton.addEventListener('click', () => {
        const categoryInput = document.createElement('div');
        categoryInput.className = 'category-input-wrapper';
        categoryInput.innerHTML = `
            <input type="text" placeholder="Category name" class="category-input">
            <button type="button" class="add-category-confirm">Add</button>
            <button type="button" class="add-category-cancel">Cancel</button>
        `;
        
        categoryList.appendChild(categoryInput);
        categoryInput.querySelector('.category-input').focus();
        
        // Handle confirm
        categoryInput.querySelector('.add-category-confirm').addEventListener('click', () => {
            const input = categoryInput.querySelector('.category-input');
            if(input.value.trim()) {
                const category = document.createElement('div');
                category.className = 'category-item';
                category.innerHTML = `
                    <label>
                        <input type="checkbox" name="categories[]" value="${input.value.trim()}">
                        ${input.value.trim()}
                    </label>
                `;
                categoryInput.replaceWith(category);
            }
        });
        
        // Handle cancel
        categoryInput.querySelector('.add-category-cancel').addEventListener('click', () => {
            categoryInput.remove();
        });
    });
    
    // Initialize categories if editing
    <% if(library_data && library_data.type === "Article" && library_data.data.categories) { %>
        try {
            const categories = <%- JSON.stringify(library_data.data.categories) %>;
            categories.forEach(category => {
                const categoryElement = document.createElement('div');
                categoryElement.className = 'category-item';
                categoryElement.innerHTML = `
                    <label>
                        <input type="checkbox" name="categories[]" value="${category}" checked>
                        ${category}
                    </label>
                `;
                categoryList.appendChild(categoryElement);
            });
        } catch(error) {
            console.error('Error initializing categories:', error);
        }
    <% } %>
  </form>
