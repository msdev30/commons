<!-- Set up initial variables -->
<% 
const isEditMode = library_data && library_data.type === 'course';
const courseLessons = isEditMode ? JSON.stringify(library_data.data.lessons) : '[]';
%>

<form class="library-form course-form">
   <div class="form-input-element">
       <section class="form-element-type">Course Main Image</section>
       <section class="form-input-field">
        <label class="file-upload-field" for="main-img-upload">
            <% if(library_data && library_data.data && library_data.type === "course") { %>
                <%= library_data.data.info.mainImage %>
            <% } else { %>
                Img upload
            <% } %>
        </label>
           <input type="file" class="image-upload" name="mainImage" id="main-img-upload" multiple accept="image/*" 
               <% if(!library_data) { %> required <% } %>>
       </section>
   </div>

   <div class="form-input-element">
       <section class="form-element-type">Course Title</section>
       <section class="form-input-field">
           <input name="title" type="text" placeholder="Enter Course Title..." required
               <% if(library_data && library_data.data && library_data.type === "course") { %> 
                   value="<%= library_data.data.info.title %>" readonly style="background:#f5f5f5;"
               <% } %>>
       </section>
   </div>

   <div class="form-input-element">
       <section class="form-element-type">Course Description</section>
       <section class="form-input-field">
           <textarea class="input-field" name="course-description" type="text" placeholder="Enter Course Description..." required>
               <% if(library_data && library_data.data && library_data.type === "course") { %>
                   <%= library_data.data.info.description %>
               <% } %>
           </textarea>
       </section>
   </div>

   <div class="form-input-element">
       <section class="form-element-type">Expected Completion Time</section>
       <section class="form-input-field">
           <input name="time" type="text" placeholder="x min/hr..." required
               <% if(library_data && library_data.data && library_data.type === "course") { %> 
                   value="<%= library_data.data.info.time %>"
               <% } %>>
       </section>
   </div>

   <div class="course-lesson-append-container"></div>

   <section class="form-btn-section">
       <button type="button" class="create-course-lesson-btn secondary-btn">
           <i class="fa-solid fa-plus"></i> Add Lesson
       </button>
       <button type="submit" class="submit-article-form submit-btn">
           <span class="course-submit-progress"></span>
           <i class="fa-solid fa-paper-plane z-idx10"></i>
           <span class="z-idx10">Post Course</span>
       </button>
   </section>
</form>

<script>
// Configuration object with EJS variables
window.FORM_CONFIG = {
   isEditMode: isEditMode,
   courseLessons: courseLessons,
   baseUrl: '<%- isEditMode ? "/update-library-course" : "/library-course-post" %>'
};

let course_inputs = [...document.querySelectorAll('.course-form input[type="file"]')];
let course_input_element_container = document.querySelector('.course-form-append-container');
const course_form = document.querySelector('.course-form');
let submit_btn = document.querySelector('.course-submit-progress');
const create_course_lesson = course_form.querySelector('.create-course-lesson-btn');
const lesson_container = course_form.querySelector('.course-lesson-append-container');
let countOfNewCourseElements = 0;
let countOfLessons = 0;

function addNewElement(elementNum) {
   const element = document.createElement('div');
   element.className = 'form-input-element';
   element.innerHTML = `
       <div class="drop-down">
           <section>Element Type</section>
           <div class="input-field">
               <input type="radio" id="text${elementNum}" name="element${elementNum}" value="Text" onchange="updateInputField(this)">
               <label for="text${elementNum}">Text</label>
               <input type="radio" id="paragraph${elementNum}" name="element${elementNum}" value="Paragraph" onchange="updateInputField(this)">
               <label for="paragraph${elementNum}">Paragraph</label>
               <input type="radio" id="image${elementNum}" name="element${elementNum}" value="image" onchange="updateInputField(this)">
               <label for="image${elementNum}">Image</label>
               <input type="radio" id="video${elementNum}" name="element${elementNum}" value="Video" onchange="updateInputField(this)">
               <label for="video${elementNum}">Video</label>
               <input type="radio" id="audio${elementNum}" name="element${elementNum}" value="Audio" onchange="updateInputField(this)">
               <label for="audio${elementNum}">Audio</label>
           </div>
       </div>
       <section class="form-input-field">
       </section>`;
   return element;
}

function updateInputField(radio) {
   const container = radio.closest('.form-input-element');
   const inputField = container.querySelector('.form-input-field');
   
   let inputHtml = '';
   if(radio.value === 'Paragraph') {
       inputHtml = '<textarea class="input-field" required placeholder="Enter text..."></textarea>';
   } else if(['image', 'Audio', 'Video'].includes(radio.value)) {
       inputHtml = `<input type="file" accept="${radio.value.toLowerCase()}/*" required>`;
   } else {
       inputHtml = '<input type="text" required placeholder="Enter text...">';
   }
   
   inputField.innerHTML = inputHtml;
}

function updateFileNameUploaded(fileInput) {
   const label = fileInput.previousElementSibling;
   if (fileInput.files.length > 0) {
       label.textContent = fileInput.files[0].name;
   }
}

course_inputs.forEach(file => {
   file.addEventListener('change', () => {
       updateFileNameUploaded(file);
   });
});

const createLessonInputSection = (lessonNum) => {
   const lesson = document.createElement('div');
   lesson.innerHTML = `<div class="lesson">
       <span class="lesson-id">Lesson ${lessonNum}</span>
       <div class="lesson-info">
           <div class="form-input-element">
               <section class="form-element-type">Lesson Title</section>
               <section class="form-input-field">
                   <input name="lesson-title" type="text" placeholder="Enter Title..." required>
               </section>
           </div>
           <div class="form-input-element">
               <section class="form-element-type">Completion Time</section>
               <section class="form-input-field">
                   <input name="lesson-time" type="text" placeholder="Enter Lesson Completion Time: 5 min/hr..." required>
               </section>
           </div>
       </div>
       <div class="form-input-element">
           <section class="form-element-type">Lesson Description</section>
           <section class="form-input-field">
               <textarea class="input-field" name="lesson-description" type="text" placeholder="Enter Description..." required></textarea>
           </section>
       </div>
       <div class="course-form-append-container"></div>
       <div class="form-btn-section">
           <button onClick="handleAddingElementsInLesson(this)" type="button" class="create-course-element-btn secondary-btn">
               <i class="fa-solid fa-plus"></i> Add Lesson Element
           </button>
           <button onClick="removeLesson(this)" type="button" class="secondary-btn delete-accent">
               <i class="fa-regular fa-trash-can"></i> Remove Lesson
           </button>
       </div>
   </div>`;
   return lesson;
};

function removeHtmlElement(element) {
   element.remove();
}

function removeLesson(remove_btn) {
   removeHtmlElement(remove_btn.parentElement.parentElement);
}

function handleAddingElementsInLesson(element) {
   element.parentElement.parentElement.querySelector('.course-form-append-container')
       .appendChild(addNewElement(countOfNewCourseElements++));
}

create_course_lesson.addEventListener('click', () => {
   lesson_container.append(createLessonInputSection(++countOfLessons));
});

function formatCourseDataForSubmission(form) {
   let formData = {lessons: []};
   
   try {
       formData.title = form.querySelector('[name="title"]').value;
       formData.time = form.querySelector('[name="time"]').value;
       formData.description = form.querySelector('[name="course-description"]').value;
       formData.mainImage = form.querySelector('#main-img-upload').files[0].name;
   } catch(e) {
       console.error('Form data error:', e);
   }
   
   let lessons = form.querySelectorAll('.lesson');
   lessons.forEach((lesson, index) => {
       let lessonObj = {lessonContent: []};
       lessonObj.title = lesson.querySelector('[name="lesson-title"]').value;
       lessonObj.time = lesson.querySelector('[name="lesson-time"]').value;
       lessonObj.description = lesson.querySelector('[name="lesson-description"]').value;
       
       lesson.querySelectorAll('.course-form-append-container .form-input-element').forEach((element, itemNum) => {
           let data = '';
           let type = element.querySelector('input[type="radio"]:checked').value;

           if(type === 'Paragraph') {
               data = element.querySelector('.form-input-field .input-field').value;
           } else if (type === 'image' || type === 'Audio' || type === 'Video') {
               data = element.querySelector('.form-input-field input[type="file"]').files[0] ? 
                   element.querySelector('.form-input-field input[type="file"]').files[0].name : 
                   element.querySelector('.form-input-field input[type="file"]').getAttribute('data-src');
           } else {
               data = element.querySelector('.form-input-field input').value;
           }
           
           lessonObj.lessonContent.push({
               order: itemNum + 1,
               type: type,
               data: data
           });
       });
       formData.lessons.push(lessonObj);
   });
   return formData;
}

function updateDropDownValue(radio, value) {
   const container = radio.closest('.form-input-element');
   if (radio.value === 'Paragraph') {
       container.querySelector('.input-field').value = value;
   } else if (radio.value === 'image' || radio.value === 'Audio' || radio.value === 'Video') {
       container.querySelector('input[type="file"]').setAttribute('data-src', value);
   } else {
       container.querySelector('input').value = value;
   }
}

course_form.addEventListener('submit', async (e) => {
   e.preventDefault();
   let submit_btn_progress = course_form.querySelector('.course-submit-progress');
   await handleFormMediaUploads(course_form, submit_btn_progress);
   
   try {
       const response = await fetch(window.FORM_CONFIG.baseUrl, {
           method: 'POST',
           headers: {
               'Content-Type': 'application/json',
           },
           body: JSON.stringify(formatCourseDataForSubmission(course_form)),
       });
       
       if (response.status === 200) {
           window.location.href = "/library";
       } else {
           alert('Error submitting Form');
       }
   } catch (error) {
       console.error('Submission error:', error);
       alert('Error submitting Form');
   }
});

// Initialize form if in edit mode
if (window.FORM_CONFIG.isEditMode) {
   window.FORM_CONFIG.courseLessons.forEach(lesson => {
       let current_lesson = lesson_container.appendChild(createLessonInputSection(++countOfLessons));
       let append_container = current_lesson.querySelector('.course-form-append-container');
       
       current_lesson.querySelector('[name="lesson-title"]').value = lesson.title;
       current_lesson.querySelector('[name="lesson-time"]').value = lesson.time;
       current_lesson.querySelector('[name="lesson-description"]').innerText = lesson.description;
       
       lesson.lessonContent.forEach(element => {
           handleAddingElementsInLesson(current_lesson.querySelector('.create-course-element-btn'));
           let appendedElement = append_container.lastChild;
           appendedElement.querySelectorAll(".drop-down input[type='radio']").forEach(radio => {
               if(radio.value === element.type) {
                   radio.checked = true;
                   updateDropDownValue(radio, element.data);
               }
           });
       });
   });
}
</script>
